#!/usr/bin/env python2
# encoding: utf-8

"""
Detecting Cycles.

Challenge Description:

Given a sequence, write a program to detect cycles within it.

Input sample:

Your program should accept as its first argument a path to a filename
containing a sequence of numbers (space delimited). The file can have multiple
such lines. E.g

2 0 6 3 1 6 3 1 6 3 1
3 4 8 0 11 9 7 2 5 6 10 1 49 49 49 49
1 2 3 1 2 3 1 2 3

Output sample:

Print to stdout the first cycle you find in each sequence. Ensure that there
are no trailing empty spaces on each line you print. E.g.

6 3 1
49
1 2 3

The cycle detection problem is explained more widely on wiki
http://en.wikipedia.org/wiki/Cycle_detection

Constrains:
The elements of the sequence are integers in range [0, 99]
The length of the sequence is in range [0, 50]

"""

import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

# Using Floyd's algorithm
for test in test_cases:
    sequence = [int(i) for i in test.split()]
    seq_length = len(sequence)

    # find the cycle
    x, y = 0, 1
    while sequence[x] != sequence[y]:
        x = (x + 1) % seq_length
        y = (y + 2) % seq_length

    # find the begin of the cycle
    begin = 0
    y, x = abs(y - x), 0
    while sequence[x] != sequence[y]:
        x = (x + 1) % seq_length
        y = (y + 1) % seq_length
        begin += 1

    # find the cycle length
    length, y = 1, x + 1
    while sequence[x] != sequence[y]:
        y += 1
        length += 1

    print ' '.join(str(i) for i in sequence[begin:begin + length])
