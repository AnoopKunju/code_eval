#!/usr/bin/env python2
# encoding: utf-8

"""
Find a Square.

Challenge Description:

You have coordinates of four points on a plane. Check whether they make a
square.

Input sample:

Your program should accept as its first argument a path to a filename. Input
example is the following

(1,6), (6,7), (2,7), (9,1)
(4,1), (3,4), (0,5), (1,2)
(4,6), (5,5), (5,6), (4,5)

All numbers in input are integers between 0 and 10

Output sample:

Print results in the following way.

false
false
true

"""

import re
import math
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()


def dist_a_to_b(a, b):
    return math.sqrt(((a[0] - b[0]) ** 2) + ((a[1] - b[1]) ** 2))

for test in test_cases:
    points_regex = re.compile('\((\d+)?,(\d+)\)')
    points = sorted((int(j[0]), int(j[1])) for j in
                    re.findall(points_regex, test))
    # a square have four sides of same length and two diagonals equally long,
    # so in a square can't be more than two distinct distances between all of
    # its points
    distances_to_check = [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]
    distances = set()
    for d in distances_to_check:
        distances.add(dist_a_to_b(points[d[0]], points[d[1]]))
    print 'true' if len(distances) == 2 else 'false'
