#!/usr/bin/env python2
# encoding: utf-8

"""
Counting Primes.

Challenge Description:

Given two integers N and M, count the number of prime numbers between N and M
(both inclusive)

Input sample:

Your program should accept as its first argument a path to a filename. Each
line in this file contains two comma separated positive integers. E.g.

2,10
20,30

Output sample:

Print out the number of primes between N and M (both inclusive)

4
2

"""

import sys
import math

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

# Sieve of Eratosthenes to calculate the first primes until 2e5
limit = 200000

primes = [True for n in xrange(0, limit)]
primes[0], primes[1] = False, False  # 0 and 1 are not primes

for i in xrange(1, int(limit ** 0.5 + 1)):
    if primes[i]:
        for j in xrange(i ** 2, limit, i):
            primes[j] = False

primes_lst = set()
for i in xrange(len(primes)):
    if primes[i]:
        primes_lst.add(i)


# use Fibonacci method to get more primes as needed
def is_prime(lst, number):
    for n in (i for i in lst if i < int(math.sqrt(number)) + 1):
        if number % n == 0:
            return False
    return True


def extend(lst, number):
    for i in xrange(max(lst), number + 1):
        if is_prime(lst, i):
            lst.add(i)

            
with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    a, b = (int(i) for i in test.split(','))
    if b > max(primes_lst):
        extend(primes_lst, b)
    print sum(1 for i in primes_lst if i >= a and i <= b)
