#!/usr/bin/env python2
# encoding: utf-8

"""
Splitted Number.

Challenge Description:

You are given a number N and a pattern. The pattern consists of lowercase latin
letters and one operation "+" or "-". The challenge is to split the number and
evaluate it according to this pattern e.g.
1232 ab+cd -> a:1, b:2, c:3, d:2 -> 12+32 -> 44

Input sample:

Your program should accept as its first argument a path to a filename. Each
line of the file is a test case, containing the number and the pattern
separated by a single whitespace. E.g.

3413289830 a-bcdefghij
776 a+bc
12345 a+bcde
1232 ab+cd

Output sample:

For each test case print out the result of pattern evaluation. E.g.

-413289827
83
2346
44

Constraints:

N is in range [100, 1000000000]
Assume that only valid expressions are provided (no leading zeros)

"""

import re
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    number, pattern = test.split()
    regex = re.compile('([a-z]+)([\+|\-])[a-z]+')
    len_a, operation = re.findall(regex, pattern)[0]
    number_a, number_b = int(number[:len(len_a)]), int(number[len(len_a):])
    print number_a + number_b if operation == '+' else number_a - number_b
